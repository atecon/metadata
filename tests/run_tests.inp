set verbose off
clear
set assert stop

include "./src/metadata.inp" --force


function void test_read_and_add_xml_buffer_ok (void)
    print "Start testing read_and_add_xml_buffer() if file exists"

    # Given
    string filename = "./data/denmark.xml"
    bundle B_actual = _(filename)

    # When
    scalar error_actual = read_and_add_xml_buffer(&B_actual)
    string xml_buffer_actual = B_actual.xml_buffer

    string xml_buffer_expected = readfile(filename)
    scalar error_expected = FALSE

    # Then
    assert(error_actual == error_expected)
    assert(xml_buffer_actual == xml_buffer_expected)
end function
test_read_and_add_xml_buffer_ok()


function void test_read_and_add_xml_buffer_er (void)
    print "Start testing read_and_add_xml_buffer() if file not exists"

    # Given
    string filename = "some_non_existing_file"
    bundle B_actual = _(filename)

    # When
    scalar error_actual = read_and_add_xml_buffer(&B_actual)
    scalar error_expected = TRUE

    # Then
    assert(error_actual == error_expected)
end function
test_read_and_add_xml_buffer_er()


function void test_get_paths_to_parse (void)
    print "Start testing get_paths_to_parse()."

    # Given

    # When
    bundle paths_actual = get_paths_to_parse()

    scalar n_paths_expected = nelem(paths_actual)
    scalar n_paths_expected = 2

    # Then
    assert(n_paths_expected == n_paths_expected)
end function
test_get_paths_to_parse()


function void test_get_path_content (void)
    print "Start testing get_path_content() for the case that the path actually exists."

    # Given
    string filename = "./data/denmark.xml"
    string xml_buffer = readfile(filename)
    string xml_identifier = "//description"

    # When
    scalar n_got_actual = 0
    string content_actual = get_path_content(xml_identifier, xml_buffer,\
                                            &n_got_actual)
    scalar n_got_expected = 1
    string content_expected = xmlget(xml_buffer, xml_identifier,\
                                    &n_got_expected)

    # Then
    assert(n_got_actual == n_got_expected)
    assert(content_actual == content_expected)
end function
test_get_path_content()


function void test_get_path_content_noexists (void)
    print "Start testing get_path_content() for the case that the path does not exist."

    # Given
    string filename = "./data/denmark.xml"
    string xml_buffer = readfile(filename)
    string xml_identifier = "//foo"

    # When
    scalar n_got_actual = 0
    string content_actual = get_path_content(xml_identifier, xml_buffer,\
                                            &n_got_actual)
    scalar n_got_expected = 0
    string content_expected = ""

    # Then
    assert(n_got_actual == n_got_expected)
    assert(content_actual == content_expected)
end function
test_get_path_content_noexists()


function void test_cast_value_to_integer (void)
    print "Start testing cast_value_to_integer()."

    # Given
    bundle B = _(some_string = "huhu", empty_string = "", \
                some_scalar = 3.2, pd = "7", nvar = "23")

    # When
    cast_value_to_integer(&B)
    scalar pd_actual = B.pd
    scalar nvar_actual = B.nvar
    scalar some_scalar_actual = B.some_scalar
    string some_string_actual = B.some_string
    string empty_string_actual = B.empty_string

    scalar pd_expected = 7
    scalar nvar_expected = 23
    scalar some_scalar_expected = 3.2
    string some_string_expected = "huhu"
    string empty_string_expected = ""

    # Then
    assert(pd_actual == pd_expected)
    assert(nvar_actual == nvar_expected)
    assert(some_scalar_actual == some_scalar_expected)
    assert(some_string_actual == some_string_expected)
    assert(empty_string_actual == empty_string_expected)
end function
test_cast_value_to_integer()


function void test_cast_discrete_value (void)
    print "Start testing cast_discrete_value()."

    # Given
    bundle B
    bundle B.variable_1 = _(name = "var1", discrete = "true")
    bundle B.variable_2 = _(name = "var2")

    # When
    cast_discrete_value(&B)
    scalar n_var_actual = nelem(B)
    scalar n_var_expected = 2
    string name_var1_actual = B.variable_1.name
    string name_var2_actual = B.variable_2.name
    string name_var1_expected = "var1"
    string name_var2_expected = "var2"

    scalar discrete_var1_actual = B.variable_1.discrete
    scalar discrete_var2_actual = B.variable_2.discrete
    scalar discrete_var1_expected = TRUE
    scalar discrete_var2_expected = FALSE

    # Then
    assert(n_var_actual == n_var_actual)
    assert(name_var1_actual == name_var1_expected)
    assert(name_var2_actual == name_var2_expected)
    assert(discrete_var1_actual == discrete_var1_expected)
    assert(discrete_var2_actual == discrete_var2_expected)
end function
test_cast_discrete_value()


function void test_extract_variable_contents (void)
    print "Start testing extract_variable_contents()."

    # Given
    scalar n_series_expected = 4
    bundle B = _(nvar = n_series_expected)
    string filename = "./data/denmark.xml"
    string xml_buffer = readfile(filename)

    # When
    bundle Results_actual = extract_variable_contents(B, xml_buffer)
    strings Results_keys_actual = getkeys(Results_actual)
    # limit testing to 2 out of 4 series
    string Results_key_1_expected = "variable_1"
    string Results_key_2_expected = "variable_2"

    bundle variable_1_bundle_actual = Results_actual["variable_1"]
    bundle variable_2_bundle_actual = Results_actual["variable_2"]

    string variable_1_name_actual = variable_1_bundle_actual["name"]
    string variable_1_name_expected = "LRM"
    string variable_1_label_actual = variable_1_bundle_actual["label"]
    string variable_1_label_expected = "log of real money supply, m2"

    string variable_2_name_actual = variable_2_bundle_actual["name"]
    string variable_2_name_expected = "LRY"
    string variable_2_label_actual = variable_2_bundle_actual["label"]
    string variable_2_label_expected = "log of real income"

    # Then
    assert(nelem(Results_actual) == n_series_expected)
    assert(inbundle(Results_actual, Results_key_1_expected))
    assert(inbundle(Results_actual, Results_key_2_expected))
    assert(variable_1_name_actual == variable_1_name_expected)
    assert(variable_2_name_actual == variable_2_name_expected)
    assert(variable_1_label_actual == variable_1_label_expected)
    assert(variable_2_label_actual == variable_2_label_expected)
end function
test_extract_variable_contents()


function void test_extract_series_metadata (void)
    print "Start testing extract_series_metadata() for data set with string-valued series."

    # Given
    scalar n_string_vars_expected = 2
    bundle B = _(n_string_vars = n_string_vars_expected)
    string filename = "./data/grunfeld.xml"
    string xml_buffer = readfile(filename)

    # When
    bundle B_actual = extract_series_metadata(B, xml_buffer)
    scalar n_string_vars_actual = nelem(B_actual)

    strings variable_names_actual = getkeys(B_actual)
    string var1_name_expected = "ticker"
    string var2_name_expected = "firmname"

        scalar var1_n_strvals_actual = nelem(B_actual.ticker.string_values)
    scalar var2_n_strvals_actual = nelem(B_actual.firmname.string_values)
    scalar var1_n_strvals_expected = 10
    scalar var2_n_strvals_expected = 10

    matrix var1_name_exists = instrings(variable_names_actual, var1_name_expected)
    matrix var2_name_exists = instrings(variable_names_actual, var2_name_expected)

    # Then
    assert(nelem(var1_name_exists) == 1)
    assert(nelem(var2_name_exists) == 1)
    assert(var1_n_strvals_actual == var1_n_strvals_expected)
    assert(var2_n_strvals_actual == var2_n_strvals_expected)
end function
test_extract_series_metadata()


function void test_extract_series_metadata_no (void)
    print "Start testing extract_series_metadata() for data set with no string-valued series."

    # Given
    scalar n_string_vars_expected = 0
    bundle B = _(n_string_vars = n_string_vars_expected)
    string filename = "./data/grunfeld.xml"
    string xml_buffer = readfile(filename)

    # When
    bundle B_actual = extract_series_metadata(B, xml_buffer)

    # Then
    assert(nelem(B_actual) == n_string_vars_expected)
end function
test_extract_series_metadata_no()


function void test_merge_var_stringvals_dicts (void)
    print "Start testing merge_var_stringvals_dicts()."

    # Given
    string var1_name_expected = "ticker"
    string var2_name_expected = "firmname"
    string var1_label_expected = "ID of var1"
    string var2_label_expected = "ID of var2"

    bundle VariableContents = null
    bundle VariableContents.variable_1 = _(name = var1_name_expected, discrete = 1, label = var1_label_expected)
    bundle VariableContents.variable_2 = _(name = var2_name_expected, label = var2_label_expected)

    bundle StringValueContents = null
    bundle StringValueContents["@var1_name_expected"] = _(is_string_valued = FALSE)
    bundle StringValueContents["@var2_name_expected"] = _(is_string_valued = TRUE, string_values = defarray("Ford", "VW"))

    # When
    bundle B_actual = merge_var_stringvals_dicts(VariableContents, StringValueContents)

    scalar n_keys_actual = nelem(B_actual)
    scalar n_keys_expected = 2

    strings keys_actual = getkeys(B_actual)
    matrix var1_name_exists = instrings(keys_actual, var1_name_expected)
    matrix var2_name_exists = instrings(keys_actual, var2_name_expected)

    bundle bundle_var1 = B_actual.ticker
    bundle bundle_var2 = B_actual.firmname

    # Then
    assert(n_keys_actual == n_keys_expected)
    assert(nelem(var1_name_exists) == TRUE)
    assert(nelem(var2_name_exists) == TRUE)

    assert(bundle_var1.discrete == 1)
    assert(bundle_var1.label == var1_label_expected)
    assert(bundle_var1.is_string_valued == 0)

    assert(inbundle(bundle_var2, "discrete") == FALSE)
    assert(bundle_var2.label == var2_label_expected)
    assert(bundle_var2.is_string_valued == TRUE)
    assert(inbundle(bundle_var2, string_values) > 0)

    assert(bundle_var2.string_values[1] == "Ford")
    assert(bundle_var2.string_values[2] == "VW")
end function
test_merge_var_stringvals_dicts()


print "Finished all tests succesfully."
quit

