set verbose off
clear

set assert stop
include assertion.gfn

include "./src/metadata.inp" --force


function void test_read_and_add_xml_buffer_ok (void)
    print "Start testing read_and_add_xml_buffer() if file exists"

    # Given
    string filename = "./data/denmark.xml"
    bundle B_actual = _(filename)

    # When
    scalar error_actual = read_and_add_xml_buffer(&B_actual)
    string xml_buffer_actual = B_actual.xml_buffer

    string xml_buffer_expected = readfile(filename)
    scalar error_expected = FALSE

    # Then
    assert(error_actual == error_expected)
    assert(xml_buffer_actual == xml_buffer_expected)
end function
test_read_and_add_xml_buffer_ok()


function void test_read_and_add_xml_buffer_er (void)
    print "Start testing read_and_add_xml_buffer() if file not exists"

    # Given
    string filename = "some_non_existing_file"
    bundle B_actual = _(filename)

    # When
    scalar error_actual = read_and_add_xml_buffer(&B_actual)
    scalar error_expected = TRUE

    # Then
    assert(error_actual == error_expected)
end function
test_read_and_add_xml_buffer_er()


function void test_get_paths_to_parse (void)
    print "Start testing get_paths_to_parse()."

    # Given

    # When
    bundle paths_actual = get_paths_to_parse()

    scalar n_paths_expected = nelem(paths_actual)
    scalar n_paths_expected = 2

    # Then
    assert(n_paths_expected == n_paths_expected)
end function
test_get_paths_to_parse()


function void test_get_path_content (void)
    print "Start testing get_path_content() for the case that the path actually exists."

    # Given
    string filename = "./data/denmark.xml"
    string xml_buffer = readfile(filename)
    string xml_identifier = "//description"

    # When
    scalar n_got_actual = 0
    string content_actual = get_path_content(xml_identifier, xml_buffer,\
                                            &n_got_actual)
    scalar n_got_expected = 1
    string content_expected = xmlget(xml_buffer, xml_identifier,\
                                    &n_got_expected)

    # Then
    assert(n_got_actual == n_got_expected)
    assert(content_actual == content_expected)
end function
test_get_path_content()


function void test_get_path_content_noexists (void)
    print "Start testing get_path_content() for the case that the path does not exist."

    # Given
    string filename = "./data/denmark.xml"
    string xml_buffer = readfile(filename)
    string xml_identifier = "//foo"

    # When
    scalar n_got_actual = 0
    string content_actual = get_path_content(xml_identifier, xml_buffer,\
                                            &n_got_actual)
    scalar n_got_expected = 0
    string content_expected = ""

    # Then
    assert(n_got_actual == n_got_expected)
    assert(content_actual == content_expected)
end function
test_get_path_content_noexists()


function void test_cast_value_to_integer (void)
    print "Start testing cast_value_to_integer()."

    # Given
    bundle B = _(some_string = "huhu", some_scalar = 3.2, pd = "7", \
                 nvar = "23")

    # When
    cast_value_to_integer(&B)
    scalar pd_actual = B.pd
    scalar nvar_actual = B.nvar

    scalar pd_expected = 7
    scalar nvar_expected = 23

    # Then
    assert(pd_actual == pd_expected)
    assert(nvar_actual == nvar_expected)
end function
test_cast_value_to_integer()


function void test_cast_discrete_value (void)
    print "Start testing cast_discrete_value()."

    # Given
    bundle B
    bundle B.variable_1 = _(name = "var1", discrete = "true")
    bundle B.variable_2 = _(name = "var2")

    # When
    cast_discrete_value(&B)
    scalar n_var_actual = nelem(B)
    scalar n_var_expected = 2
    string name_var1_actual = B.variable_1.name
    string name_var2_actual = B.variable_2.name
    string name_var1_expected = "var1"
    string name_var2_expected = "var2"

    scalar discrete_var1_actual = B.variable_1.discrete
    scalar discrete_var2_actual = B.variable_2.discrete
    scalar discrete_var1_expected = TRUE
    scalar discrete_var2_expected = FALSE

    # Then
    assert(n_var_actual == n_var_actual)
    assert(name_var1_actual == name_var1_expected)
    assert(name_var2_actual == name_var2_expected)
    assert(discrete_var1_actual == discrete_var1_expected)
    assert(discrete_var2_actual == discrete_var2_expected)
end function
test_cast_discrete_value()


function void test_extract_variable_contents (void)
    print "Start testing extract_variable_contents()."

    # Given
    scalar n_series_expected = 4
    bundle B = _(nvar = n_series_expected)
    string filename = "./data/denmark.xml"
    string xml_buffer = readfile(filename)

    # When
    bundle Results_actual = extract_variable_contents(B, xml_buffer)
    strings Results_keys_actual = getkeys(Results_actual)
    # limit testing to 2 out of 4 series
    string Results_key_1_expected = "variable_1"
    string Results_key_2_expected = "variable_2"

    bundle variable_1_bundle_actual = Results_actual["variable_1"]
    bundle variable_2_bundle_actual = Results_actual["variable_2"]

    string variable_1_name_actual = variable_1_bundle_actual["name"]
    string variable_1_name_expected = "LRM"
    string variable_1_label_actual = variable_1_bundle_actual["label"]
    string variable_1_label_expected = "log of real money supply, m2"

    string variable_2_name_actual = variable_2_bundle_actual["name"]
    string variable_2_name_expected = "LRY"
    string variable_2_label_actual = variable_2_bundle_actual["label"]
    string variable_2_label_expected = "log of real income"

    # Then
    assert(nelem(Results_actual) == n_series_expected)
    assert(inbundle(Results_actual, Results_key_1_expected))
    assert(inbundle(Results_actual, Results_key_2_expected))
    assert(variable_1_name_actual == variable_1_name_expected)
    assert(variable_2_name_actual == variable_2_name_expected)
    assert(variable_1_label_actual == variable_1_label_expected)
    assert(variable_2_label_actual == variable_2_label_expected)
end function
test_extract_variable_contents()





print "Finished all tests succesfully."
quit

