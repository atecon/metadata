<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="metadata" no-data-ok="true" minver="2020e">
<author email="atecon@posteo.de">Riccardo &quot;Jack&quot; Lucchetti and Artur Tarassow</author>
<version>0.9</version>
<date>2020-12-18</date>
<description>Retrieve metadata from gdt files.</description>
<tags>C81</tags>
<help>
The metadata package supports the retrieval of various metadata from
gdt data files. These data files are stored in a structured way following
the xml standard.

Please ask questions and report bugs on the gretl mailing list if possible.
Alternatively, create an issue ticket on the github repo (see below).

Source code and test script(s) can be found here:
https://github.com/atecon/metadata


The package comprises two public functions.

get_metadata()
--------------
filename:   string, Full path to a gdt file

This function consumes a gdt file, and extracts various metadata (see
below).

return:     Bundle holding metadata.


print_metadata()
----------------
self:         bundle, Bundle returned by the get_metadata() function.

get_markers:  bool, Flag whether to parse markers if existent (
              default: FALSE), optional

This function prints a summary of metadata information obtained from
get_metadata().

return:     nothing


Metadata items:
---------------
name:             Name of the data file
frequency:        Frequency of the data
t1:               Starting observation
t2:               Ending observation
pd:               Periodicity
type:             Type of the underlying data, e.g. time-series
description:      String of the description
nvar:             Number of series in data set
version:          Version of data set
n_strings_var:    Number of string-valued series
SeriesDetails:    Bundle comprising information for each of the nvar series.
string_values:    String array including the distinct string values of a
                  string valued series only.
discrete:         Boolean flag indicating whether a series is discrete
                  (TRUE) or not (FALSE)
markers:          String array holding the consecutive marker labels.


The bundle SeriesDetails structures information as follows:

SeriesDetails
    -| &lt;NAME_OF_SERIES_1&gt;
        -| label (string)
        -| string_values (string array)
        -| discrete (bool)
    -| &lt;NAME_OF_SERIES_2&gt;
        -| label (string)
        -| string_values (string array)
        -| discrete (bool)



Change-log:
---------
v0.9 (12-2020): initial release
</help>
<gretl-function name="get_metadata" type="bundle">
 <params count="2">
  <param name="filename" type="string" const="true"/>
  <param name="get_markers" type="bool" default="0" const="true"/>
 </params>
<code>bundle self = null
string self.filename = filename
if !is_minimum_gretl_version()
  return null
endif
err = read_and_add_xml_buffer(&amp;self)
if err
  return null
endif
bundle self.get_paths_to_parse = get_paths_to_parse()
bundle PathContents = extract_prepare_path_contents(self)
cast_string_to_numeric(&amp;PathContents)
bundle VariableContents = extract_variable_contents(PathContents, self.xml_buffer)
cast_discrete_value(&amp;VariableContents)
bundle StringValueContents = extract_series_metadata( PathContents, self.xml_buffer)
bundle VariablesContents = null
if get_markers == TRUE
  bundle VariablesContents = extract_observations_contents( self.xml_buffer)
endif
bundle SeriesDetails = merge_var_stringvals_dicts(VariableContents, StringValueContents)
bundle self = PathContents
bundle self.SeriesDetails = SeriesDetails
self = self + VariablesContents
return self
</code>
</gretl-function>
<gretl-function name="print_metadata" type="void">
 <params count="2">
  <param name="self" type="bundle" const="true"/>
  <param name="verbose" type="bool" default="0" const="true"/>
 </params>
<code>/* Print summary in nice readable fashion.*/
printf &quot;\n%s, %s. Contains %d series\n&quot;, self.name, self.type, self.nvar
printf &quot;first obs: %d, last obs: %d\n&quot;, self.t1, self.t2
if verbose
  strings variables = getkeys(self.SeriesDetails)
  loop foreach i variables
    printf &quot;%3d: %-32s&quot;, i, &quot;$i&quot;
    printf &quot;%s&quot;, self.SeriesDetails[&quot;$i&quot;].discrete ? &quot; D&quot; : &quot;  &quot;
    print_is_string_valued(self.SeriesDetails[&quot;$i&quot;])
    print_label(self.SeriesDetails[&quot;$i&quot;])
    printf &quot;\n&quot;
  endloop
endif
printf &quot;\n\n&quot;
</code>
</gretl-function>
<gretl-function name="trim_extra_lines" type="string" private="1">
 <params count="1">
  <param name="buffer" type="string" const="true"/>
 </params>
<code>/* */
if nelem(buffer) == 0
  return &quot;&quot;
endif
strings content = strsplit(buffer, &quot;\n&quot;)
scalar n = nelem(content)
if n == 1
  return content[n]
elif n &gt; 1
  return content[1]
endif
</code>
</gretl-function>
<gretl-function name="is_minimum_gretl_version" type="scalar" private="1">
<code>if $version &gt;= 20205
  return TRUE
else
  printError(&quot;At minimum Gretl version 2020e required.&quot;)
  return FALSE
endif
</code>
</gretl-function>
<gretl-function name="printInfo" type="void" private="1">
 <params count="1">
  <param name="s" type="string" const="true"/>
 </params>
<code>printf &quot;\nInfo: %s\n&quot;, s
</code>
</gretl-function>
<gretl-function name="printWarning" type="void" private="1">
 <params count="1">
  <param name="s" type="string" const="true"/>
 </params>
<code>printf &quot;\nWarning: %s\n&quot;, s
</code>
</gretl-function>
<gretl-function name="printError" type="void" private="1">
 <params count="1">
  <param name="s" type="string" const="true"/>
 </params>
<code>printf &quot;\nError: %s\n&quot;, s
</code>
</gretl-function>
<gretl-function name="read_and_add_xml_buffer" type="scalar" private="1">
 <params count="1">
  <param name="self" type="bundleref"/>
 </params>
<code>/* Read gdt file which has a xml structure. */
catch self.xml_buffer = readfile(self.filename)
if $error
  printError(sprintf(&quot;Failed to read file '%s'. Abort.\n&quot;, self.filename))
  return TRUE
else
  return FALSE
endif
</code>
</gretl-function>
<gretl-function name="get_paths_to_parse" type="bundle" private="1">
<code>/* Config paths which should be parsed. */
bundle Paths = _( description = &quot;//description&quot;, version = &quot;//gretldata[1]/@version&quot;, name = &quot;//gretldata[1]/@name&quot;, t1 = &quot;//gretldata[1]/@startobs&quot;, t2 = &quot;//gretldata[1]/@endobs&quot;, type = &quot;//gretldata[1]/@type&quot;, pd = &quot;//gretldata[1]/@frequency&quot;, nvar = &quot;/gretldata[1]/variables/@count&quot;, n_string_vars = &quot;/gretldata[1]/string-tables/@count&quot; )
return Paths
</code>
</gretl-function>
<gretl-function name="get_variable_keys_to_parse" type="strings" private="1">
<code>/* Keys of metadata for each variable/ series to parse.
NOTE: &quot;name&quot; MUST be positioned first! */
strings variable_keys = defarray(&quot;name&quot;, &quot;label&quot;, &quot;discrete&quot;)
return variable_keys
</code>
</gretl-function>
<gretl-function name="get_variables_keys_to_parse" type="strings" private="1">
<code>/* Keys of metadata for each variables/ to parse. */
strings keys = defarray(&quot;count&quot;, &quot;labels&quot;)
return keys
</code>
</gretl-function>
<gretl-function name="get_path_content" type="string" private="1">
 <params count="3">
  <param name="path" type="string" const="true">
<description>xpath identifier</description>
  </param>
  <param name="xml_buffer" type="string" const="true"/>
  <param name="n_got" type="scalarref">
<description>Number of occurences of path</description>
  </param>
 </params>
<code>/* Extract content of some path in xml. */
string path_content
path_content = xmlget(xml_buffer, path, &amp;n_got)
if $error
  printWarning(sprintf(&quot;Failed to find the path '%s'. Ignore.&quot;, path))
endif
return path_content
</code>
</gretl-function>
<gretl-function name="extract_prepare_path_contents" type="bundle" private="1">
 <params count="1">
  <param name="self" type="bundle" const="true"/>
 </params>
<code>/* Loop over all specified paths and extract its consent from xml buffer. Store output in a key-value store. */
bundle PathContents
strings keys = getkeys(self.get_paths_to_parse)
loop foreach i keys
  scalar n_got = 0
  string keyname = sprintf(&quot;%s&quot;, &quot;$i&quot;)
  string PathContents[&quot;@keyname&quot;] = get_path_content(self.get_paths_to_parse[&quot;$i&quot;], self.xml_buffer, &amp;n_got)
  if n_got &amp;&amp; keyname != &quot;description&quot; # 'descriptions' can be longer
    PathContents[&quot;@keyname&quot;] = trim_extra_lines(PathContents[&quot;@keyname&quot;])
  endif
endloop
return PathContents
</code>
</gretl-function>
<gretl-function name="get_value_names_to_cast_to_num" type="strings" private="1">
<code>/* Array of keys for which values should be cast to integers. */
return defarray(&quot;pd&quot;, &quot;t1&quot;, &quot;t2&quot;, &quot;nvar&quot;, &quot;n_string_vars&quot;, &quot;version&quot;)
</code>
</gretl-function>
<gretl-function name="cast_string_to_numeric" type="void" private="1">
 <params count="1">
  <param name="B" type="bundleref"/>
 </params>
<code>/* Cast string values for keys to integers. */
strings keys = get_value_names_to_cast_to_num()
loop foreach i keys
  if inbundle(B, &quot;$i&quot;)
    scalar B[&quot;$i&quot;] = nelem(B[&quot;$i&quot;]) ? atof(B[&quot;$i&quot;]) : 0
  endif
endloop
</code>
</gretl-function>
<gretl-function name="cast_discrete_value" type="void" private="1">
 <params count="1">
  <param name="VariableContents" type="bundleref"/>
 </params>
<code>/* Set the key &quot;discrete&quot; to 0 if not existing and to 1 if &quot;true&quot;. Per default this key is an empty string when not existing but &quot;true&quot; if existing. */
strings variable_id = getkeys(VariableContents)
loop foreach i variable_id
  if inbundle(VariableContents[&quot;$i&quot;], &quot;discrete&quot;)
    if VariableContents[&quot;$i&quot;].discrete == &quot;true&quot;
      VariableContents[&quot;$i&quot;].discrete = TRUE
    else
      VariableContents[&quot;$i&quot;].discrete = FALSE
    endif
  else
    VariableContents[&quot;$i&quot;].discrete = FALSE
  endif
endloop
</code>
</gretl-function>
<gretl-function name="extract_variable_contents" type="bundle" private="1">
 <params count="2">
  <param name="PathContents" type="bundle" const="true"/>
  <param name="xml_buffer" type="string" const="true"/>
 </params>
<code>/* Compile dictionary for each variable in data set. &quot;key&quot; refers to i-th variable_%d and &quot;value&quot; holds another dictionary referring to the metadata available for the i-th variable such as &quot;name&quot;, &quot;label&quot; ect. */
bundle VariableContents
strings variable_keys = get_variable_keys_to_parse()
loop i=1..PathContents.nvar
  string path = sprintf(&quot;/gretldata[1]/variables/variable[%d]/&quot;, i)
  string variable_id = sprintf(&quot;variable_%d&quot;, $i)
  bundle VariableContents[&quot;@variable_id&quot;] = null
  loop foreach j variable_keys
    scalar n_got = 0
    string key = sprintf(&quot;%s%s%s&quot;, path, &quot;@&quot;, &quot;$j&quot;)
    string content = get_path_content(key, xml_buffer, &amp;n_got)
    VariableContents[&quot;@variable_id&quot;][&quot;$j&quot;] = trim_extra_lines(content)
  endloop
endloop
return VariableContents
</code>
</gretl-function>
<gretl-function name="extract_observations_contents" type="bundle" private="1">
 <params count="1">
  <param name="xml_buffer" type="string" const="true"/>
 </params>
<code>/* Compile bundle holding astring array with markers if existing in xml. */
bundle ObservationsContents
strings variable_keys = get_variables_keys_to_parse()
string path = &quot;/gretldata[1]/observations/&quot;
scalar has_markers = get_markers_flag(xml_buffer, path)
if has_markers == FALSE
  return ObservationsContents
endif
scalar count = get_markers_count(xml_buffer, path)
ObservationsContents.markers = parse_markers(count, xml_buffer, path)
return ObservationsContents
</code>
</gretl-function>
<gretl-function name="get_markers_count" type="scalar" private="1">
 <params count="2">
  <param name="xml_buffer" type="string" const="true"/>
  <param name="path" type="string" const="true"/>
 </params>
<code>/* Get number of counts (==number of observations) and hence the number of non-distiguished markers. */
string key = sprintf(&quot;%s%s%s&quot;, path, &quot;@&quot;, &quot;count&quot;)
scalar n_got = 0
string content = get_path_content(key, xml_buffer, &amp;n_got)
content = trim_extra_lines(content)
return atof(content)
</code>
</gretl-function>
<gretl-function name="get_markers_flag" type="scalar" private="1">
 <params count="2">
  <param name="xml_buffer" type="string" const="true"/>
  <param name="path" type="string" const="true"/>
 </params>
<code>/* Parse flag and cast string to binary. */
string key = sprintf(&quot;%s%s%s&quot;, path, &quot;@&quot;, &quot;labels&quot;)
scalar n_got = 0
string content = get_path_content(key, xml_buffer, &amp;n_got)
content = trim_extra_lines(content)
return (content == &quot;true&quot;) ? TRUE : FALSE
</code>
</gretl-function>
<gretl-function name="parse_markers" type="strings" private="1">
 <params count="3">
  <param name="count" type="scalar" const="true"/>
  <param name="xml_buffer" type="string" const="true"/>
  <param name="path" type="string" const="true"/>
 </params>
<code>/*  Parse markers from 'observation' keys. */
strings markers_labels = array(count)
loop i=1..count
  scalar n_got = 0
  string key = sprintf(&quot;%sobs[%d]/@label&quot;, path, i)
  string content = get_path_content(key, xml_buffer, &amp;n_got)
  markers_labels[i] = trim_extra_lines(content)
endloop
return markers_labels
</code>
</gretl-function>
<gretl-function name="extract_series_metadata" type="bundle" private="1">
 <params count="2">
  <param name="PathContents" type="bundle" const="true"/>
  <param name="xml_buffer" type="string" const="true"/>
 </params>
<code>/* Extract and compile for each string-valued series information in form of a dictionary such as:
key : Name of string-valued series
string_values: Array of distinct string-values (not ordered)
*/
bundle B
if PathContents.n_string_vars
  string string_seperator = sprintf(&quot;\&quot; \&quot;&quot;)
  loop i=1..PathContents.n_string_vars
    scalar n_got = 0
    path = sprintf(&quot;/gretldata[1]/string-tables/valstrings[%d]&quot;, i)
    string key = sprintf(&quot;%s/%s&quot;, path, &quot;@owner&quot;)
    string owner = get_path_content(key, xml_buffer, &amp;n_got)
    if n_got
      owner = trim_extra_lines(owner)
      bundle B[&quot;@owner&quot;] = null
      string_values = get_path_content(path, xml_buffer, &amp;n_got)
      string_values = trim_extra_lines(string_values)
      string_values = strsub(string_values, string_seperator, &quot;|&quot;)
      strings B[&quot;@owner&quot;].string_values = strsplit(string_values, &quot;|&quot;)
    endif
  endloop
endif
return B
</code>
</gretl-function>
<gretl-function name="merge_var_stringvals_dicts" type="bundle" private="1">
 <params count="2">
  <param name="VariableContents" type="bundle" const="true"/>
  <param name="StringValueContents" type="bundle" const="true"/>
 </params>
<code>/* Merge information from both bundles. Each series name existent in gdt acts as a separate key. */
bundle B
scalar n_variables = nelem(VariableContents)
loop foreach i VariableContents
  bundle Btmp = VariableContents[&quot;$i&quot;]
  strings keys = getkeys(Btmp)
  string name = Btmp.name
  delete Btmp.name --force
  bundle B[&quot;@name&quot;] = Btmp
  if inbundle(StringValueContents, &quot;@name&quot;)
    # case when series &quot;name&quot; is string-valued
    bundle B[&quot;@name&quot;] += StringValueContents.@name
  endif
endloop
return B
</code>
</gretl-function>
<gretl-function name="print_is_string_valued" type="void" private="1">
 <params count="1">
  <param name="B" type="bundle" const="true"/>
 </params>
<code>if inbundle(B, &quot;is_string_valued&quot;)
  printf &quot;%s&quot;, B.is_string_valued ? &quot;S&quot; : &quot;&quot;
else
  printf &quot;&quot;
endif
</code>
</gretl-function>
<gretl-function name="print_label" type="void" private="1">
 <params count="1">
  <param name="B" type="bundle" const="true"/>
 </params>
<code>if inbundle(B, &quot;label&quot;)
  printf &quot;  %s&quot;, B.label
else
  printf &quot;&quot;
endif
</code>
</gretl-function>
<sample-script>
set verbose off
#include metadata.gfn

include string_utils.gfn

include &quot;/home/at/git/metadata/src/metadata.inp&quot; --force

scalar EXAMPLE = 1

if EXAMPLE == 1
    Meta = get_metadata(&quot;grunfeld.gdt&quot;)
    print Meta

    print_metadata(Meta)
    print_metadata(Meta, TRUE)

    # Extract some information
    eval Meta.description
    eval Meta.SeriesDetails.firmname
    eval Meta.SeriesDetails.invest

elif EXAMPLE == 2
    Meta = get_metadata(&quot;data4-10.gdt&quot;)
    print Meta
    eval Meta.SeriesDetails.PUPIL

elif EXAMPLE == 3   # also get 'markers'
    open mrw.gdt -q
    Meta = get_metadata(&quot;mrw.gdt&quot;, TRUE)
    print Meta
    eval Meta.SeriesDetails.nonoil.discrete
    eval Meta.markers
    eval Meta.markers[1]    # 1st marker value
endif
</sample-script>
</gretl-function-package>
</gretl-functions>
