function string trim_extra_lines (const string buffer)
    /* */

    if nelem(buffer) == 0
        return ""
    endif
    strings content = strsplit(buffer, "\n")

    scalar n = nelem(content)
    if n == 1
        return content[n]
    elif n > 1
        return content[1]
    endif
end function


function scalar is_minimum_gretl_version (void)
    if $version >= 20205
        return TRUE
    else
        printError("At minimum Gretl version 2020e required.")
        return FALSE
    endif
end function

function void printInfo (const string s)
    printf "\nInfo: %s\n", s
end function

function void printWarning (const string s)
    printf "\nWarning: %s\n", s
end function

function void printError (const string s)
    printf "\nError: %s\n", s
end function


function scalar read_and_add_xml_buffer (bundle *self)
    /* Read gdt file which has a xml structure. */

    catch self.xml_buffer = readfile(self.filename)
    if $error
        printError(sprintf("Failed to read file '%s'. Abort.\n", self.filename))
        return TRUE
    else
        return FALSE
    endif
end function


function bundle get_paths_to_parse (void)
    /* Config paths which should be parsed. */

    bundle Paths = _(\
      description = "//description", \
      version = "//gretldata[1]/@version", \
      name = "//gretldata[1]/@name", \
      t1 = "//gretldata[1]/@startobs", \
      t2 = "//gretldata[1]/@endobs", \
      type = "//gretldata[1]/@type", \
      pd = "//gretldata[1]/@frequency", \
      nvar = "/gretldata[1]/variables/@count", \
      n_string_vars = "/gretldata[1]/string-tables/@count" \
      )

    return Paths
end function


function strings get_variable_keys_to_parse (void)
/* Keys of metadata for each variable/ series to parse.
    NOTE: "name" MUST be positioned first! */

    strings variable_keys = defarray("name", "label", "discrete")

    return variable_keys
end function

function strings get_variables_keys_to_parse (void)
/* Keys of metadata for each variables/ to parse. */

    strings keys = defarray("count", "labels")

    return keys
end function



function string get_path_content (const string path "xpath identifier",
                                  const string xml_buffer,
                                  scalar *n_got "Number of occurences of path")
    /* Extract content of some path in xml. */

    string path_content

    path_content = xmlget(xml_buffer, path, &n_got)
    if $error
        printWarning(sprintf("Failed to find the path '%s'. Ignore.", path))
    endif

    return path_content
end function


function bundle extract_prepare_path_contents (const bundle self)
    /* Loop over all specified paths and extract its consent from xml buffer. Store output in a key-value store. */

    bundle PathContents
    strings keys = getkeys(self.get_paths_to_parse)

    loop foreach i keys
        scalar n_got = 0
        string keyname = sprintf("%s", "$i")

        string PathContents["@keyname"] = \
          get_path_content(self.get_paths_to_parse["$i"],\
                           self.xml_buffer, &n_got)

        if n_got && keyname != "description" # 'descriptions' can be longer
            PathContents["@keyname"] = trim_extra_lines(PathContents["@keyname"])
        endif
    endloop

    return PathContents
end function


function strings get_value_names_to_cast_to_num (void)
    /* Array of keys for which values should be cast to integers. */
    return defarray("pd", "t1", "t2", "nvar", "n_string_vars", "version")
end function


function void cast_string_to_numeric (bundle *B)
    /* Cast string values for keys to integers. */

    strings keys = get_value_names_to_cast_to_num()

    loop foreach i keys
        if inbundle(B, "$i")
            scalar B["$i"] = nelem(B["$i"]) ? atof(B["$i"]) : 0
        endif
    endloop
end function


function void cast_discrete_value (bundle *VariableContents)
    /* Set the key "discrete" to 0 if not existing and to 1 if "true". Per default this key is an empty string when not existing but "true" if existing. */

    strings variable_id = getkeys(VariableContents)

    loop foreach i variable_id
        if inbundle(VariableContents["$i"], "discrete")
            if VariableContents["$i"].discrete == "true"
                VariableContents["$i"].discrete = TRUE
            else
                VariableContents["$i"].discrete = FALSE
            endif
        else
            VariableContents["$i"].discrete = FALSE
        endif
    endloop
end function


function bundle extract_variable_contents (const bundle PathContents,
                                           const string xml_buffer)
    /* Compile dictionary for each variable in data set. "key" refers to i-th variable_%d and "value" holds another dictionary referring to the metadata available for the i-th variable such as "name", "label" ect. */

    bundle VariableContents
    strings variable_keys = get_variable_keys_to_parse()

    loop i=1..PathContents.nvar
        string path = sprintf("/gretldata[1]/variables/variable[%d]/", i)

        string variable_id = sprintf("variable_%d", $i)
        bundle VariableContents["@variable_id"] = null

        loop foreach j variable_keys
            scalar n_got = 0
            string key = sprintf("%s%s%s", path, "@", "$j")

            string content = get_path_content(key, xml_buffer, &n_got)
            VariableContents["@variable_id"]["$j"] = trim_extra_lines(content)
        endloop
    endloop

    return VariableContents
end function


function bundle extract_observations_contents (const string xml_buffer)
    /* Compile bundle holding astring array with markers if existing in xml. */

    bundle ObservationsContents
    strings variable_keys = get_variables_keys_to_parse()
    string path = "/gretldata[1]/observations/"

    scalar has_markers = get_markers_flag(xml_buffer, path)
    if has_markers == FALSE
        return ObservationsContents
    endif

    scalar count = get_markers_count(xml_buffer, path)

    ObservationsContents.markers = parse_markers(count, xml_buffer, path)

    return ObservationsContents
end function


function scalar get_markers_count (const string xml_buffer, const string path)
    /* Get number of counts (==number of observations) and hence the number of non-distiguished markers. */

    string key = sprintf("%s%s%s", path, "@", "count")
    scalar n_got = 0
    string content = get_path_content(key, xml_buffer, &n_got)
    content = trim_extra_lines(content)

    return atof(content)
end function


function scalar get_markers_flag (const string xml_buffer, const string path)
    /* Parse flag and cast string to binary. */

    string key = sprintf("%s%s%s", path, "@", "labels")
    scalar n_got = 0
    string content = get_path_content(key, xml_buffer, &n_got)
    content = trim_extra_lines(content)

    return (content == "true") ? TRUE : FALSE
end function

function strings parse_markers (const scalar count,
                                const string xml_buffer,
                                const string path)
    /*  Parse markers from 'observation' keys. */

    strings markers_labels = array(count)

    loop i=1..count
        scalar n_got = 0
        string key = sprintf("%sobs[%d]/@label", path, i)
        string content = get_path_content(key, xml_buffer, &n_got)
        markers_labels[i] = trim_extra_lines(content)
    endloop

    return markers_labels
end function


function bundle extract_series_metadata (const bundle PathContents,
                                         const string xml_buffer)
    /* Extract and compile for each string-valued series information in form of a dictionary such as:

       key : Name of string-valued series
       string_values: Array of distinct string-values (not ordered)
    */

    bundle B

    if PathContents.n_string_vars
        string string_seperator = sprintf("\" \"")

        loop i=1..PathContents.n_string_vars
            scalar n_got = 0
            path = sprintf("/gretldata[1]/string-tables/valstrings[%d]", i)
            string key = sprintf("%s/%s", path, "@owner")

            string owner = get_path_content(key, xml_buffer, &n_got)

            if n_got
                owner = trim_extra_lines(owner)
                bundle B["@owner"] = null

                string_values = get_path_content(path, xml_buffer, &n_got)
                string_values = trim_extra_lines(string_values)
                string_values = strsub(string_values, string_seperator, "|")
                strings B["@owner"].string_values = strsplit(string_values, "|")
            endif
        endloop
    endif

    return B
end function


function bundle merge_var_stringvals_dicts (const bundle VariableContents,
                                            const bundle StringValueContents)
    /* Merge information from both bundles. Each series name existent in gdt acts as a separate key. */

    bundle B
    scalar n_variables = nelem(VariableContents)

    loop foreach i VariableContents
        bundle Btmp = VariableContents["$i"]
        strings keys = getkeys(Btmp)

        string name = Btmp.name
        delete Btmp.name --force
        bundle B["@name"] = Btmp

        if inbundle(StringValueContents, "@name")
            # case when series "name" is string-valued
            bundle B["@name"] += StringValueContents.@name
        endif
    endloop

    return B
end function


function bundle get_metadata (const string filename,
                              const bool get_markers[0])

    bundle self = null
    string self.filename = filename

    if !is_minimum_gretl_version()
        return null
    endif

    err = read_and_add_xml_buffer(&self)
    if err
        return null
    endif

    bundle self.get_paths_to_parse = get_paths_to_parse()

    bundle PathContents = extract_prepare_path_contents(self)

    cast_string_to_numeric(&PathContents)

    bundle VariableContents = extract_variable_contents(PathContents, \
      self.xml_buffer)

    cast_discrete_value(&VariableContents)

    bundle StringValueContents = extract_series_metadata(\
      PathContents, \
      self.xml_buffer)

    bundle VariablesContents = null
    if get_markers == TRUE
        bundle VariablesContents = extract_observations_contents(\
            self.xml_buffer)
    endif

    bundle SeriesDetails = merge_var_stringvals_dicts(VariableContents, StringValueContents)
    bundle self = PathContents
    bundle self.SeriesDetails = SeriesDetails
    self = self + VariablesContents

    return self
end function


function void print_is_string_valued (const bundle B)
    if inbundle(B, "is_string_valued")
        printf "%s", B.is_string_valued ? "S" : ""
    else
        printf ""
    endif
end function

function void print_label (const bundle B)
    if inbundle(B, "label")
        printf "  %s", B.label
    else
        printf ""
    endif
end function


function void print_metadata (const bundle self, const bool verbose[0])
    /* Print summary in nice readable fashion.*/

    printf "\n%s, %s. Contains %d series\n", self.name, self.type, self.nvar
    printf "first obs: %d, last obs: %d\n", self.t1, self.t2

    if verbose
        strings variables = getkeys(self.SeriesDetails)
        loop foreach i variables
            printf "%3d: %-32s", i, "$i"
            printf "%s", self.SeriesDetails["$i"].discrete ? " D" : "  "
            print_is_string_valued(self.SeriesDetails["$i"])
            print_label(self.SeriesDetails["$i"])
            printf "\n"
        endloop
    endif
    printf "\n\n"
end function
