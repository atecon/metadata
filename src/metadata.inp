function string trim_extra_lines(const string buffer)
    return strsplit(buffer, "\n")[1]
end function


function bundle var_metadata (const string s, scalar v)
    /* */

    bundle ret = null
    scalar n_got = 0

    string prefix = sprintf("/gretldata[1]/variables/variable[%d]/", v)
    ret.name = trim_extra_lines(xmlget(s, prefix ~ "@name"))

    a = xmlget(s, prefix ~ "@label", &n_got)
    if n
        ret.label = trim_extra_lines(a)
    endif

    ret.string_valued = 0
    ret.discrete = 0
    a = xmlget(s, prefix ~ "@discrete", &n)
    if n
        ret.discrete = trim_extra_lines(a) == "true"
    endif

    return ret
end function

function scalar find_owner(const string owner, const bundles vm)
    ret = NA
    loop i = 1 .. nelem(vm)
        if owner == vm[i].name
            ret = i
            break
        endif
    endloop
    return ret
end function


function scalar version_is_ok (void)
    /* */

    if $version >= 20205
        return TRUE
    else
        printError("At minimum Gretl version 2020e required.")
        return FALSE
    endif
end function

function void printInfo (const string s)
    printf "\nInfo: %s\n", s
end function

function void printWarning (const string s)
    printf "\nWarning: %s\n", s
end function

function void printError (const string s)
    printf "\nError: %s\n", s
end function


function scalar read_and_add_xml_buffer (bundle *self)
    /* Read gdt file which has a xml structure. */

    catch self.xml_buffer = readfile(self.filename)
    if $error
        printError(sprintf("Failed to read file '%s'. Abort.\n", self.filename))
        return TRUE
    else
        return FALSE
    endif
end function


function bundle get_paths_to_parse (void)
    /* Config paths which should be parsed. */

    bundle Paths = _(\
                        description = "//description", \
                        version = "//gretldata[1]/@version", \
                        name = "//gretldata[1]/@name", \
                        t1 = "//gretldata[1]/@" ~ "startobs", \
                        t2 = "//gretldata[1]/@" ~ "endobs", \
                        type = "//gretldata[1]/@type", \
                        pd = "//gretldata[1]/@frequency", \
                        nvar = "/gretldata[1]/variables/@count" \
                    )

    return Paths
end function

function string get_path_content (const string path "xpath identifier",
                                  const string xml_buffer,
                                  scalar *n_got "Number of occurences of path")
    /* Extract content of some path in xml. */

    string path_content

    path_content = xmlget(xml_buffer, path, &n_got)
    if $error
        printWarning(sprintf("Failed to find the path '%s'. Ignore.", path))
    endif

    return path_content
end function


function bundle extract_prepare_path_contents (const bundle self)
    /* Loop over all specified paths and extract its contens from xml buffer. Store output in a key-value store. */

    bundle PathContents
    strings keys = getkeys(self.get_paths_to_parse)

    loop foreach i keys
        scalar n_got = 0
        string keyname = sprintf("%s", "$i")

        string PathContents["@keyname"] = \
                get_path_content(\
                                self.get_paths_to_parse["$i"],\
                                self.xml_buffer, &n_got)

        if n_got
            PathContents["@keyname"] = trim_extra_lines(PathContents["@keyname"])
        endif
    endloop

    return PathContents
end function


function void cast_pd_and_nvar_to_int (bundle *B)
    /* Cast string values for keys "pd" and "nvar" to integer. */

    if inbundle(B, "pd")
        scalar B.pd = atof(B.pd)
    endif
    if inbundle(B, "nvar")
        scalar B.nvar = atof(B.nvar)
    endif
end function


function bundle get_gdtinfo (const string filename)
    /* */

    bundle self = null
    string self.filename = filename

    if !version_is_ok()
        return null
    endif

    err = read_and_add_xml_buffer(&self)
    if err
        return null
    endif

    bundle self.get_paths_to_parse = get_paths_to_parse()

    # TODO: test extract_prepare_path_contents()
    bundle PathContents = extract_prepare_path_contents(self)

    cast_pd_and_nvar_to_int(&PathContents)

    if PathContents.nvar

        bundles varmetadata = array(PathContents.nvar)

        *** var_metadata() macht überwiegend Dinge, die auch in extract_prepare_path_contents() getan werden. Merge die beiden () wo möglich.

        loop i = 1 .. ret.nvar
            varmetadata[i] = var_metadata(s, i)
        endloop

        st = xmlget(s, "/gretldata[1]/string-tables/@count", &ngot)
        if ngot
            nt = atof(st)
            loop i = 1 .. nt
                path = sprintf("/gretldata[1]/string-tables/valstrings[%d]", i)
                owner = trim_extra_lines(xmlget(s, path ~ "/@owner"))
                nv = find_owner(owner, varmetadata)
                varmetadata[nv].string_valued = 1

                raw = trim_extra_lines(xmlget(s, path))
                sep = sprintf("\" \"")
                dq = sprintf("\"")
                raw = strsub(raw, sep, "|")
                raw = strsub(raw, dq, "")
                varmetadata[nv]["strvals"] = strsplit(raw, "|")
            endloop
        endif
        ret.varmetadata = varmetadata
    endif

    return ret
end function

function void gdtinfo_print(bundle b, int verbose[0])
    printf "%s, %s. Contains %d series\n", b.name, b.type, b.nvar
    printf "first obs: %s, last obs: %s\n", b.t1, b.t2
    if verbose
        loop i = 1 .. b.nvar
            md = b.varmetadata[i]
            printf "%3d: %-32s", i, md.name
            printf "%s", md.discrete ? " D" : "  "
            printf "%s", md.string_valued ? "S" : " "
            if inbundle(md, "label")
                printf " %s", md.label
            endif
            printf "\n"
        endloop
    endif
    printf "\n\n"
end function

